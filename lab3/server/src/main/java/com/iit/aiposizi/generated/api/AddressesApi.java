/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.iit.aiposizi.generated.api;

import com.iit.aiposizi.generated.model.Address;
import com.iit.aiposizi.generated.model.AddressRequest;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-05-17T23:29:22.869419+03:00[Europe/Minsk]")

@Validated
@Api(value = "addresses", description = "the addresses API")
public interface AddressesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /addresses
     *
     * @param addressRequest address (required)
     * @return Created (status code 201)
     *         or Bad request (status code 400)
     */
    @ApiOperation(value = "", nickname = "createAddress", notes = "", response = Address.class, tags={ "addresses", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = Address.class),
        @ApiResponse(code = 400, message = "Bad request") })
    @RequestMapping(value = "/addresses",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Address> createAddress(@ApiParam(value = "address" ,required=true )  @Valid @RequestBody AddressRequest addressRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"country\" : \"country\", \"number\" : 0, \"city\" : \"city\", \"street\" : \"street\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /addresses/{id}
     *
     * @param id  (required)
     * @return No Content (status code 204)
     *         or Bad Request (status code 400)
     */
    @ApiOperation(value = "", nickname = "deleteAddress", notes = "", tags={ "addresses", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 400, message = "Bad Request") })
    @RequestMapping(value = "/addresses/{id}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteAddress(@ApiParam(value = "",required=true) @PathVariable("id") UUID id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /addresses/{id}
     *
     * @param id  (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "", nickname = "getAddressById", notes = "", response = Address.class, tags={ "addresses", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Address.class),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/addresses/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Address> getAddressById(@ApiParam(value = "",required=true) @PathVariable("id") UUID id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"country\" : \"country\", \"number\" : 0, \"city\" : \"city\", \"street\" : \"street\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /addresses/all
     *
     * @return OK (status code 200)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "", nickname = "getAllAddresses", notes = "", response = Address.class, responseContainer = "List", tags={ "addresses", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Address.class, responseContainer = "List"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/addresses/all",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Address>> getAllAddresses() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"country\" : \"country\", \"number\" : 0, \"city\" : \"city\", \"street\" : \"street\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /addresses/{id}
     *
     * @param id  (required)
     * @param addressRequest  (required)
     * @return OK (status code 200)
     *         or Created (status code 201)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "", nickname = "updateAddress", notes = "", response = Address.class, tags={ "addresses", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Address.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/addresses/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Address> updateAddress(@ApiParam(value = "",required=true) @PathVariable("id") UUID id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody AddressRequest addressRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"country\" : \"country\", \"number\" : 0, \"city\" : \"city\", \"street\" : \"street\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
