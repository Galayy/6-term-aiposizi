/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.iit.aiposizi.generated.api;

import com.iit.aiposizi.generated.model.Employee;
import com.iit.aiposizi.generated.model.EmployeeRequest;
import com.iit.aiposizi.generated.model.PlaceEmployeeRequest;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-05-17T23:29:22.869419+03:00[Europe/Minsk]")

@Validated
@Api(value = "employees", description = "the employees API")
public interface EmployeesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /employees
     *
     * @param employeeRequest  (required)
     * @return Created (status code 201)
     *         or Unprocessable entity (status code 422)
     */
    @ApiOperation(value = "", nickname = "createEmployee", notes = "", response = Employee.class, tags={ "employees", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = Employee.class),
        @ApiResponse(code = 422, message = "Unprocessable entity") })
    @RequestMapping(value = "/employees",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Employee> createEmployee(@ApiParam(value = "" ,required=true )  @Valid @RequestBody EmployeeRequest employeeRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"speciality\" : \"speciality\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /employees/{id}
     *
     * @param id  (required)
     * @return No Content (status code 204)
     *         or Bad request (status code 400)
     */
    @ApiOperation(value = "", nickname = "deleteEmployee", notes = "", tags={ "employees", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 400, message = "Bad request") })
    @RequestMapping(value = "/employees/{id}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteEmployee(@ApiParam(value = "",required=true) @PathVariable("id") UUID id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /employees/all
     *
     * @param offices  (optional, default to new ArrayList&lt;&gt;())
     * @param rooms  (optional, default to new ArrayList&lt;&gt;())
     * @return OK (status code 200)
     */
    @ApiOperation(value = "", nickname = "getAllEmployees", notes = "", response = Employee.class, responseContainer = "List", tags={ "employees", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Employee.class, responseContainer = "List") })
    @RequestMapping(value = "/employees/all",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Employee>> getAllEmployees(@ApiParam(value = "") @Valid @RequestParam(value = "offices", required = false) List<String> offices,@ApiParam(value = "") @Valid @RequestParam(value = "rooms", required = false) List<Integer> rooms) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"speciality\" : \"speciality\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /employees/{id}/place
     *
     * @param id  (required)
     * @param placeEmployeeRequest  (required)
     * @return OK (status code 200)
     *         or Bad request (status code 400)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "", nickname = "placeEmployee", notes = "", tags={ "employees", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/employees/{id}/place",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> placeEmployee(@ApiParam(value = "",required=true) @PathVariable("id") UUID id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody PlaceEmployeeRequest placeEmployeeRequest) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /employees/{id}
     *
     * @param id  (required)
     * @param employeeRequest  (required)
     * @return OK (status code 200)
     *         or Bad request (status code 400)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "", nickname = "updateEmployee", notes = "", response = Employee.class, tags={ "employees", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Employee.class),
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/employees/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Employee> updateEmployee(@ApiParam(value = "",required=true) @PathVariable("id") UUID id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody EmployeeRequest employeeRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"speciality\" : \"speciality\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
